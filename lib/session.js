// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var Base, SessionClient, WordArray, buffer_cmp_ule, checkers, iced, idcheckers, log, make_esc, scrypt, test, tsec, util, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  make_esc = require('iced-error').make_esc;

  checkers = require('keybase-bjson-core').checkers;

  idcheckers = require('keybase-messenger-core').id.checkers;

  tsec = require('triplesec');

  WordArray = tsec.WordArray, scrypt = tsec.scrypt;

  buffer_cmp_ule = tsec.util.buffer_cmp_ule;

  log = require('iced-logger');

  util = require('util');

  exports.SessionClient = SessionClient = (function(_super) {
    __extends(SessionClient, _super);

    function SessionClient(args) {
      SessionClient.__super__.constructor.call(this, args);
    }

    SessionClient.prototype._solve_challenge = function(_arg, cb) {
      var N, args, b, bytes, challenge, err, esc, i, key, out, p, r, res, target, ___iced_passed_deferral, __iced_deferrals, __iced_k, _begin, _end, _positive, _ref;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      challenge = _arg.challenge;
      esc = make_esc(cb, "SessionClient::solve_challenge");
      log.debug("+ Solving session challenge");
      key = WordArray.from_buffer(challenge.token[1]);
      _ref = challenge.params, N = _ref.N, r = _ref.r, p = _ref.p, bytes = _ref.bytes;
      args = {
        N: N,
        r: r,
        p: p,
        dkLen: bytes
      };
      target = challenge.params.less_than;
      log.debug("| Target is -> " + (target.toString('hex')) + " (with " + bytes + " bytes)");
      res = null;
      i = 0;
      (function(_this) {
        return (function(__iced_k) {
          var _i, _results, _while;
          i = 0;
          _begin = 0;
          _end = 1000000;
          _positive = _end > _begin;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                if (_positive) {
                  i += 1;
                } else {
                  i -= 1;
                }
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!!((_positive === true && i >= 1000000) || (_positive === false && i <= 1000000))) {
              return _break();
            } else {

              res = new Buffer(4);
              res.writeUInt32BE(i, 0);
              if ((i % 1024 === 0) && i > 0) {
                log.debug("| attempt " + i);
              }
              args.salt = WordArray.from_buffer(res);
              args.key = key.clone();
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/messenger-client/src/session.iced",
                  funcname: "SessionClient._solve_challenge"
                });
                scrypt(args, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return out = arguments[0];
                    };
                  })(),
                  lineno: 43
                }));
                __iced_deferrals._fulfill();
              })(function() {
                b = out.to_buffer();
                (function(__iced_k) {
                  if (buffer_cmp_ule(b, target) < 0) {
                    (function(__iced_k) {
_break()
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(_next);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          if (res == null) {
            err = new Error("failed to solve the puzzle");
          }
          log.debug("- Solved session challenge @" + i);
          return cb(err, res);
        };
      })(this));
    };

    SessionClient.prototype.establish_session = function(cb) {
      var args, body, challenge, data, esc, json, res, solution, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SessionClient::init_thread");
      log.debug("+ init_session");
      args = {
        endpoint: "session/challenge",
        method: "GET",
        template: {
          challenge: {
            token: [checkers.value(1), idcheckers.sct],
            params: {
              bytes: checkers.intval(0, 64),
              N: checkers.intval(0, 1 << 30),
              p: checkers.intval(1, 100),
              r: checkers.intval(1, 100),
              less_than: checkers.buffer(0, 20)
            }
          }
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/messenger-client/src/session.iced",
            funcname: "SessionClient.establish_session"
          });
          _this.request(args, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                res = arguments[0];
                return json = arguments[1];
              };
            })(),
            lineno: 74
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          challenge = json.body.challenge;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/messenger-client/src/session.iced",
              funcname: "SessionClient.establish_session"
            });
            _this._solve_challenge({
              challenge: challenge
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return solution = arguments[0];
                };
              })(),
              lineno: 80
            })));
            __iced_deferrals._fulfill();
          })(function() {
            data = {
              challenge: {
                token: json.body.challenge.token,
                solution: solution
              }
            };
            args = {
              endpoint: "session/init",
              method: "POST",
              data: data,
              template: {
                session_id: idcheckers.session
              }
            };
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/messenger-client/src/session.iced",
                funcname: "SessionClient.establish_session"
              });
              _this.request(args, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    res = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 91
              })));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("| Response from session/init -> " + (util.inspect(body)));
              log.debug("- init_session");
              return cb(null, body.body.session_id);
            });
          });
        };
      })(this));
    };

    return SessionClient;

  })(Base);

  test = function() {
    var Config, cfg, err, sc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    Config = require('./config').Config;
    log["package"]().env().set_level(log["package"]().DEBUG);
    cfg = new Config({
      port: 3021
    });
    sc = new SessionClient({
      cfg: cfg
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/max/src/keybase/messenger-client/src/session.iced"
        });
        sc.establish_session(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 106
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (typeof err !== "undefined" && err !== null) {
          throw err;
        }
        return process.exit(0);
      };
    })(this));
  };

}).call(this);
