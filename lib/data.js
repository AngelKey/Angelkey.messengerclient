// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var E, KeyManager, Thread, User, UserSet, athrow, buffer_cmp_ule, burn, iced, make_esc, prng, rando, tsec, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  tsec = require('triplesec');

  prng = tsec.prng;

  buffer_cmp_ule = tsec.util.buffer_cmp_ule;

  _ref = require('kbpgp'), burn = _ref.burn, KeyManager = _ref.KeyManager;

  athrow = require('iced-utils').util.athrow;

  E = require('./err').E;

  make_esc = require('iced-error').make_esc;

  rando = function(n, cb) {
    var wa, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/messenger-client/src/data.iced"
        });
        prng.generate(n, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return wa = arguments[0];
            };
          })(),
          lineno: 12
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(wa.to_buffer());
      };
    })(this));
  };

  exports.User = User = (function() {
    function User(_arg) {
      this.fingerprint = _arg.fingerprint, this.display_name = _arg.display_name, this.public_key = _arg.public_key, this.inbox_server = _arg.inbox_server, this.is_me = _arg.is_me;
      this.i = null;
      this.t = null;
      this.km = null;
    }

    User.prototype.init = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
            funcname: "User.init"
          });
          KeyManager.import_from_armored_pgp({
            raw: _this.public_key
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.km = arguments[1];
              };
            })(_this),
            lineno: 28
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if ((typeof err === "undefined" || err === null) && (_this.fingerprint == null)) {
            _this.fingerprint = _this.km.get_pgp_fingerprint();
          }
          return cb(err);
        };
      })(this));
    };

    User.prototype.gen_keys = function(cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
            funcname: "User.gen_keys"
          });
          rando(16, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.i = arguments[0];
              };
            })(_this),
            lineno: 36
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
              funcname: "User.gen_keys"
            });
            rando(16, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.t = arguments[0];
                };
              })(_this),
              lineno: 37
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return cb();
          });
        };
      })(this));
    };

    User.prototype.thread_uid = function() {
      return {
        fingerprint: this.fingerprint,
        i: this.i
      };
    };

    User.prototype.gen_init_msg = function(_arg, cb) {
      var cfg, ctext, encryption_key, err, msg, payload, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      cfg = _arg.cfg, payload = _arg.payload;
      payload.t = this.t;
      msg = cfg.encode_to_buffer(payload);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((encryption_key = _this.km.find_crypt_pgp_key()) == null) {
            return __iced_k(err = new Error(E.KeyNotFoundError("no enc key for user " + display_name)));
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
                funcname: "User.gen_init_msg"
              });
              burn({
                encryption_key: encryption_key,
                msg: msg,
                opts: {
                  hide: true
                }
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return ctext = arguments[1];
                  };
                })(),
                lineno: 55
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(msg = {
                t: _this.t,
                ctext: ctext
              });
            });
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, msg);
        };
      })(this));
    };

    return User;

  })();

  exports.UserSet = UserSet = (function() {
    function UserSet(_arg) {
      this.users = _arg.users;
    }

    UserSet.prototype.sort = function() {
      return this.users.sort(function(a, b) {
        return buffer_cmp_ule(a.fingerprint, b.fingerprint);
      });
    };

    UserSet.prototype.init = function(cb) {
      var esc, u, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "UserSet::init");
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref1, _results, _while;
          _ref1 = _this.users;
          _len = _ref1.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              u = _ref1[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
                  funcname: "UserSet.init"
                });
                u.init(esc(__iced_deferrals.defer({
                  lineno: 79
                })));
                __iced_deferrals._fulfill();
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          _this.sort();
          return cb(null);
        };
      })(this));
    };

    UserSet.prototype.gen_keys = function(cb) {
      var u, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref1, _results, _while;
          _ref1 = _this.users;
          _len = _ref1.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              u = _ref1[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
                  funcname: "UserSet.gen_keys"
                });
                u.gen_keys(__iced_deferrals.defer({
                  lineno: 87
                }));
                __iced_deferrals._fulfill();
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb();
        };
      })(this));
    };

    UserSet.prototype.thread_uids = function() {
      var u, _i, _len, _ref1, _results;
      _ref1 = this.users;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        u = _ref1[_i];
        _results.push(u.thread_uid());
      }
      return _results;
    };

    UserSet.prototype.get_users = function() {
      return this.users;
    };

    return UserSet;

  })();

  exports.Thread = Thread = (function() {
    function Thread(_arg) {
      this.cfg = _arg.cfg, this.user_set = _arg.user_set, this.etime = _arg.etime;
      this.k_s = null;
      this.k_m = null;
      this.i = null;
      this._init_flag = false;
    }

    Thread.prototype.init = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Thread::init");
      (function(_this) {
        return (function(__iced_k) {
          if (!_this._init_flag) {
            _this._init_flag = true;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
                funcname: "Thread.init"
              });
              _this.user_set.init(esc(__iced_deferrals.defer({
                lineno: 114
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
                  funcname: "Thread.init"
                });
                _this.gen_keys(__iced_deferrals.defer({
                  lineno: 115
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Thread.prototype.thread_uids = function() {
      return this.user_set.thread_uids();
    };

    Thread.prototype.thread_init_payload = function() {
      return {
        i: this.i,
        keys: {
          k_s: this.k_s,
          k_m: this.k_m
        },
        uids: this.thread_uids()
      };
    };

    Thread.prototype.gen_keys = function(cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
            funcname: "Thread.gen_keys"
          });
          rando(32, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.k_s = arguments[0];
              };
            })(_this),
            lineno: 133
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
              funcname: "Thread.gen_keys"
            });
            rando(32, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.k_m = arguments[0];
                };
              })(_this),
              lineno: 134
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
                funcname: "Thread.gen_keys"
              });
              rando(16, __iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.i = arguments[0];
                  };
                })(_this),
                lineno: 135
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
                  funcname: "Thread.gen_keys"
                });
                _this.user_set.gen_keys(__iced_deferrals.defer({
                  lineno: 136
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return cb();
              });
            });
          });
        };
      })(this));
    };

    Thread.prototype.gen_init_msg = function(cb) {
      var ctext, esc, msg, payload, u, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "gen_init_msg");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
            funcname: "Thread.gen_init_msg"
          });
          _this.init(esc(__iced_deferrals.defer({
            lineno: 143
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          msg = {
            i: _this.i,
            users: [],
            etime: _this.etime
          };
          (function(__iced_k) {
            var _i, _len, _ref1, _results, _while;
            _ref1 = _this.user_set.users;
            _len = _ref1.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                u = _ref1[_i];
                payload = _this.thread_init_payload();
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/messenger-client/src/data.iced",
                    funcname: "Thread.gen_init_msg"
                  });
                  u.gen_init_msg({
                    cfg: _this.cfg,
                    payload: payload
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return ctext = arguments[0];
                      };
                    })(),
                    lineno: 147
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return _next(msg.users.push(ctext));
                });
              }
            };
            _while(__iced_k);
          })(function() {
            return cb(null, msg);
          });
        };
      })(this));
    };

    return Thread;

  })();

}).call(this);
