// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var Base, C, Cipher, Config, KeyManager, PostMessageClient, SessionClient, Streamer, Thread, UserSet, bufferify, burn, checkers, detachsign, frame, hash, iced, kbmc, log, make_esc, unix_time, util, __iced_k, __iced_k_noop, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  SessionClient = require('./session').SessionClient;

  make_esc = require('iced-error').make_esc;

  Base = require('./base').Base;

  Config = require('./config').Config;

  _ref = require('./data'), UserSet = _ref.UserSet, Thread = _ref.Thread;

  log = require('iced-logger');

  kbmc = require('keybase-messenger-core');

  checkers = require('keybase-bjson-core').checkers;

  C = kbmc["const"];

  Cipher = kbmc.Cipher;

  _ref1 = require('kbpgp'), hash = _ref1.hash, detachsign = _ref1.detachsign, burn = _ref1.burn, KeyManager = _ref1.KeyManager;

  _ref2 = require('iced-utils').util, bufferify = _ref2.bufferify, unix_time = _ref2.unix_time;

  frame = require('purepack').frame;

  util = require('util');

  Streamer = (function() {
    function Streamer(_arg) {
      var buf, header, stream;
      header = _arg.header, buf = _arg.buf, stream = _arg.stream;
      this._bufs = [];
      this._err = null;
      this._buf_total = 0;
      if ((this._stream = stream) != null) {
        this._stream.on('end', (function(_this) {
          return function() {
            return _this._eof = true;
          };
        })(this));
        this._stream.on('error', (function(_this) {
          return function(e) {
            var _ref3;
            return _ref3 = [true, true, e], _this._eof = _ref3[0], _this._error = _ref3[1], _this._err = _ref3[2], _ref3;
          };
        })(this));
        this._eof = this._error = false;
      } else {
        this._eof = true;
        this._error = false;
      }
      this.push_prefix(header);
      if (buf != null) {
        this.push_prefix(buf);
      }
    }

    Streamer.prototype.push_prefix = function(buf) {
      buf = bufferify(buf);
      this._bufs.push(buf);
      return this._buf_total += buf.length;
    };

    Streamer.prototype._shift_empty_buffers = function() {
      while (this._bufs.length && this._bufs[0].length === 0) {
        this._bufs.shift();
      }
      return false;
    };

    Streamer.prototype.is_eof = function() {
      return (this._buf_total === 0) && this._eof;
    };

    Streamer.prototype.data_left = function() {
      return !this.is_eof();
    };

    Streamer.prototype._read_n_from_buffer = function(n) {
      var ret;
      this._shift_empty_buffers();
      ret = this._bufs.length === 0 ? null : this._bufs[0].length < n ? this._bufs.shift() : (ret = this._bufs[0].slice(0, n), this._bufs[0] = this._bufs[0].slice(n), ret);
      if (ret != null) {
        this._buf_total -= ret.length;
      }
      return ret;
    };

    Streamer.prototype._read_at_most_n = function(n, cb) {
      var ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if ((ret = _this._read_n_from_buffer(n)) != null) {
            return __iced_k();
          } else {
            (function(__iced_k) {
              if (_this.stream != null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/messenger-client/src/post.iced",
                    funcname: "Streamer._read_at_most_n"
                  });
                  _this.stream.once('readable', __iced_deferrals.defer({
                    lineno: 71
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(ret = _this.stream.read(n));
                });
              } else {
                return __iced_k();
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(ret);
        };
      })(this));
    };

    Streamer.prototype.read = function(n, cb) {
      var buf, bufs, ret, tot, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      tot = 0;
      bufs = [];
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_this.data_left() && tot < n)) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/messenger-client/src/post.iced",
                  funcname: "Streamer.read"
                });
                _this._read_at_most_n(n - tot, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return buf = arguments[0];
                    };
                  })(),
                  lineno: 81
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(typeof buf !== "undefined" && buf !== null ? (bufs.push(buf), tot += buf.length) : void 0);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          ret = Buffer.concat(bufs);
          return cb(_this._err, ret, _this.is_eof());
        };
      })(this));
    };

    return Streamer;

  })();

  exports.PostMessageClient = PostMessageClient = (function(_super) {
    __extends(PostMessageClient, _super);

    PostMessageClient.CHUNKSZ = 0x1000;

    PostMessageClient.prototype.CHUNKSZ = PostMessageClient.CHUNKSZ;

    function PostMessageClient(_arg) {
      var cfg;
      cfg = _arg.cfg, this.thread = _arg.thread, this.from = _arg.from, this.signing_km = _arg.signing_km, this.msg = _arg.msg, this.stream = _arg.stream, this.mime_type = _arg.mime_type;
      PostMessageClient.__super__.constructor.call(this, {
        cfg: cfg
      });
      this.mime_type || (this.mime_type = "text/kstm");
    }

    PostMessageClient.prototype.format_header = function(cb) {
      var body_size;
      body_size = 0;
      if (this.msg != null) {
        body_size += this.msg.length;
      }
      if (this.stream != null) {
        body_size += this.stream.size;
      }
      this.header = frame.pack({
        mime_type: this.mime_type,
        body_size: body_size,
        time: unix_time(),
        prev: this.thread.max_msg_zid
      });
      this.size = body_size + this.header.length;
      log.debug("| header: " + (util.inspect(this.header)));
      log.debug("| body_size=" + body_size + "; total size=" + this.size);
      return cb(null);
    };

    PostMessageClient.prototype.init_stream = function(cb) {
      var _ref3;
      this.streamer = new Streamer({
        header: this.header,
        buf: this.msg,
        stream: (_ref3 = this.stream) != null ? _ref3.s : void 0
      });
      this.num_chunks = Math.ceil(this.size / this.CHUNKSZ);
      log.debug("| num_chunks is " + this.num_chunks);
      return cb(null);
    };

    PostMessageClient.prototype.post_header = function(cb) {
      var arg, err, json, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ post_header");
      arg = {
        endpoint: "msg/header",
        method: "POST",
        data: {
          i: this.thread.i,
          t: this.from.t,
          sender_zid: this.from.zid,
          etime: 0,
          prev_msg_zid: this.thread.max_msg_zid,
          parent_msg_zid: 0,
          num_chunks: this.num_chunks
        },
        template: {
          msg_zid: checkers.nnint
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/messenger-client/src/post.iced",
            funcname: "PostMessageClient.post_header"
          });
          _this.request(arg, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return json = arguments[2];
              };
            })(),
            lineno: 145
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            _this.msg_zid = json.body.msg_zid;
          }
          log.debug("- post_header");
          return cb(err);
        };
      })(this));
    };

    PostMessageClient.prototype.post_chunk = function(chunk, cb) {
      var arg, ctext, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("| encrypting chunk " + this.chunk_zid);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/messenger-client/src/post.iced",
            funcname: "PostMessageClient.post_chunk"
          });
          _this.thread.get_cipher().encrypt(chunk, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ctext = arguments[0];
              };
            })(),
            lineno: 156
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.hash_streamer.update(Cipher.encode_to_stream(ctext));
          arg = {
            endpoint: "msg/chunk",
            method: "POST",
            data: {
              i: _this.thread.i,
              t: _this.from.t,
              sender_zid: _this.from.zid,
              ctext: ctext,
              msg_zid: _this.msg_zid,
              chunk_zid: _this.chunk_zid
            }
          };
          log.debug("| post_chunk " + _this.chunk_zid);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/messenger-client/src/post.iced",
              funcname: "PostMessageClient.post_chunk"
            });
            _this.request(arg, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 174
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (typeof err === "undefined" || err === null) {
              _this.chunk_zid++;
            }
            return cb(err);
          });
        };
      })(this));
    };

    PostMessageClient.prototype.post_body = function(cb) {
      var chunk, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.chunk_zid = 0;
      log.debug("+ post_body " + this.msg_zid);
      esc = make_esc(cb, "post_body");
      this.hash_streamer = hash.streamers.SHA512();
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!_this.streamer.data_left()) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/messenger-client/src/post.iced",
                  funcname: "PostMessageClient.post_body"
                });
                _this.streamer.read(_this.CHUNKSZ, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return chunk = arguments[0];
                    };
                  })(),
                  lineno: 186
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/messenger-client/src/post.iced",
                    funcname: "PostMessageClient.post_body"
                  });
                  _this.post_chunk(chunk, esc(__iced_deferrals.defer({
                    lineno: 187
                  })));
                  __iced_deferrals._fulfill();
                })(_next);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- post_body");
          return cb(null);
        };
      })(this));
    };

    PostMessageClient.prototype.sign = function(cb) {
      var err, signing_key, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      signing_key = this.signing_km.find_signing_pgp_key();
      log.debug("| sign message");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/messenger-client/src/post.iced",
            funcname: "PostMessageClient.sign"
          });
          detachsign({
            hash_streamer: _this.hash_streamer,
            signing_key: signing_key
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.sig = arguments[1];
              };
            })(_this),
            lineno: 195
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    PostMessageClient.prototype.post_sig = function(cb) {
      var arg, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      arg = {
        endpoint: "msg/sig",
        method: "POST",
        data: {
          i: this.thread.i,
          t: this.from.t,
          msg_zid: this.msg_zid,
          sig: this.sig
        }
      };
      log.debug("| post signature");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/messenger-client/src/post.iced",
            funcname: "PostMessageClient.post_sig"
          });
          _this.request(arg, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 211
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    PostMessageClient.prototype.post = function(arg, cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ PostMessageClient::post");
      esc = make_esc(cb, "PostMessageClient::post");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/messenger-client/src/post.iced",
            funcname: "PostMessageClient.post"
          });
          _this.format_header(esc(__iced_deferrals.defer({
            lineno: 219
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/messenger-client/src/post.iced",
              funcname: "PostMessageClient.post"
            });
            _this.init_stream(esc(__iced_deferrals.defer({
              lineno: 220
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/messenger-client/src/post.iced",
                funcname: "PostMessageClient.post"
              });
              _this.post_header(esc(__iced_deferrals.defer({
                lineno: 221
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/messenger-client/src/post.iced",
                  funcname: "PostMessageClient.post"
                });
                _this.post_body(esc(__iced_deferrals.defer({
                  lineno: 222
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/messenger-client/src/post.iced",
                    funcname: "PostMessageClient.post"
                  });
                  _this.sign(esc(__iced_deferrals.defer({
                    lineno: 223
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/messenger-client/src/post.iced",
                      funcname: "PostMessageClient.post"
                    });
                    _this.post_sig(esc(__iced_deferrals.defer({
                      lineno: 224
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    log.debug("- PostMessageClient::post");
                    return cb(null, _this.msg_zid);
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    PostMessageClient.prototype.delete_msgs = function(_arg, cb) {
      var args, err, msg_zid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      msg_zid = _arg.msg_zid;
      log.debug("+ PostMessageClient::delete_messages through " + msg_zid);
      args = {
        endpoint: "msg",
        method: "DELETE",
        data: {
          i: this.thread.i,
          t: this.from.t,
          sender_zid: this.from.zid,
          msg_zid: msg_zid
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/messenger-client/src/post.iced",
            funcname: "PostMessageClient.delete_msgs"
          });
          _this.request(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 241
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- deleted -> " + err);
          return cb(err);
        };
      })(this));
    };

    return PostMessageClient;

  })(Base);

}).call(this);
