// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var Base, Config, SessionClient, Thread, ThreadClient, UserSet, chris, donnie, err, iced, idg, log, main, make_esc, max, rc, __iced_deferrals, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  SessionClient = require('./session').SessionClient;

  make_esc = require('iced-error').make_esc;

  Base = require('./base').Base;

  Config = require('./config').Config;

  _ref = require('./data'), UserSet = _ref.UserSet, Thread = _ref.Thread;

  _ref1 = require('../test/data/users.iced'), donnie = _ref1.donnie, chris = _ref1.chris, max = _ref1.max;

  log = require('iced-logger');

  idg = require('keybase-messenger-core').id.generators;

  exports.ThreadClient = ThreadClient = (function(_super) {
    __extends(ThreadClient, _super);

    function ThreadClient(_arg) {
      var cfg;
      cfg = _arg.cfg, this.thread = _arg.thread, this.tmp_key_generator = _arg.tmp_key_generator, this.me = _arg.me;
      ThreadClient.__super__.constructor.call(this, {
        cfg: cfg
      });
      this.tmp_keys = null;
    }

    ThreadClient.prototype.init_thread = function(arg, cb) {
      var args, esc, msg, scli, session_id, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Client::init_thread");
      scli = new SessionClient({
        cfg: this.cfg
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/messenger-client/src/client.iced",
            funcname: "ThreadClient.init_thread"
          });
          scli.establish_session(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return session_id = arguments[0];
              };
            })(),
            lineno: 27
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/messenger-client/src/client.iced",
              funcname: "ThreadClient.init_thread"
            });
            _this.thread.gen_init_msg(esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return msg = arguments[0];
                };
              })(),
              lineno: 28
            })));
            __iced_deferrals._fulfill();
          })(function() {
            msg.session_id = session_id;
            args = {
              endpoint: "thread/init",
              method: "POST",
              data: msg
            };
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/messenger-client/src/client.iced",
                funcname: "ThreadClient.init_thread"
              });
              _this.request(args, esc(__iced_deferrals.defer({
                lineno: 36
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    ThreadClient.prototype.authorize = function(arg, cb) {};

    ThreadClient.prototype.update_write_token = function(_arg, cb) {
      var args, err, msg, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      user = _arg.user;
      log.debug("+ update write token for " + user.display_name);
      msg = {
        i: this.thread.i,
        user_zid: this.thread.get_user_zid(user),
        old_token: user.t,
        new_token: idg.write_token()
      };
      args = {
        endpoint: "thread/update_write_token",
        method: "POST",
        data: msg
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/messenger-client/src/client.iced",
            funcname: "ThreadClient.update_write_token"
          });
          _this.request(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 56
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            user.t = msg.new_token;
          }
          log.debug("- write token update: -> " + err);
          return cb(err);
        };
      })(this));
    };

    return ThreadClient;

  })(Base);

  main = function(cb) {
    var cfg, cli, esc, thread, user_set, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    log["package"]().env().set_level(log["package"]().DEBUG);
    cfg = new Config({
      port: 3021
    });
    user_set = new UserSet({
      users: [tester, chris, max]
    });
    thread = new Thread({
      cfg: cfg,
      user_set: user_set,
      etime: 0
    });
    cli = new ThreadClient({
      cfg: cfg,
      thread: thread,
      me: donnie
    });
    esc = make_esc(cb, "test");
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/messenger-client/src/client.iced"
        });
        cli.init_thread({}, esc(__iced_deferrals.defer({
          lineno: 71
        })));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/messenger-client/src/client.iced"
          });
          cli.update_write_token({
            thread: thread,
            user: chris
          }, esc(__iced_deferrals.defer({
            lineno: 72
          })));
          __iced_deferrals._fulfill();
        })(function() {
          return cb(null);
        });
      };
    })(this));
  };

  (function(_this) {
    return (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        filename: "/Users/max/src/keybase/messenger-client/src/client.iced"
      });
      main(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return err = arguments[0];
          };
        })(),
        lineno: 77
      }));
      __iced_deferrals._fulfill();
    });
  })(this)((function(_this) {
    return function() {
      rc = 0;
      if (typeof err !== "undefined" && err !== null) {
        log.error(err.toString());
        rc = 2;
      }
      return process.exit(rc);
    };
  })(this));

}).call(this);
