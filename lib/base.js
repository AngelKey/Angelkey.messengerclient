// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var Base, E, iced, request, __iced_k, __iced_k_noop,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  request = require('keybase-bjson-client').request;

  E = require('./err').E;

  Base = (function() {
    function Base(_arg) {
      this.cfg = _arg.cfg;
    }

    Base.prototype.request = function(args, cb) {
      var app_status, body, err, http_status, n, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args.url = this.cfg.make_url(args);
      http_status = args.http_status || [200];
      app_status = args.app_status || ["OK"];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/messenger-client/src/base.iced",
            funcname: "Base.request"
          });
          request(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 19
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2;
          if (typeof err !== "undefined" && err !== null) {

          } else if (!(_ref = res.statusCode, __indexOf.call(http_status, _ref) >= 0)) {
            err = new E.HttpError("Got reply " + res.statusCode);
            err.code = res.statusCode;
          } else if (((_ref1 = body.status) != null ? _ref1.name : void 0) == null) {
            err = new E.ApplicationError("No body status returned; wanted 'OK'");
          } else if (_ref2 = !(n = body.status.name), __indexOf.call(app_status, _ref2) >= 0) {
            err = new E.ApplicationError("Bad application status: " + n);
            err.status = body.status;
          }
          return cb(err, res, body);
        };
      })(this));
    };

    return Base;

  })();

}).call(this);
